// generated by Generate.ts
// running Generate.ts via deno will output this file.

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using Anatawa12.AnimatorControllerAsACode.Framework.Clip;
using UnityEditor;
using UnityEngine;

#pragma warning disable CS0649

namespace Anatawa12.AnimatorControllerAsACode.Framework.Clip
{

    #region fixed arrays

    internal struct Fixed1<T> : IFixedArray<T>
    {
        private T _item0;

        internal Fixed1(T item0) =>
            (_item0) = (item0);

        public static implicit operator Fixed1<T>(T value) => new Fixed1<T>(value);

        public int Length => 1;
        public T this[int i]
        {
            get => Helper.At(ref this, i);
            set => Helper.At(ref this, i) = value;
        }

        private static class Helper
        {
            internal static unsafe Span<T> AsSpan(ref Fixed1<T> array) => new Span<T>(Unsafe.AsPointer(ref array._item0), 1);
            internal static ref T At(ref Fixed1<T> array, int i) => ref AsSpan(ref array)[i];
        }
    }

    internal struct Fixed2<T> : IFixedArray<T>
    {
        private T _item0;
        private T _item1;

        internal Fixed2(T item0, T item1) =>
            (_item0, _item1) = (item0, item1);

        public static implicit operator Fixed2<T>((T, T) tuple) =>
            new Fixed2<T>(tuple.Item1, tuple.Item2);

        public int Length => 2;
        public T this[int i]
        {
            get => Helper.At(ref this, i);
            set => Helper.At(ref this, i) = value;
        }

        private static class Helper
        {
            internal static unsafe Span<T> AsSpan(ref Fixed2<T> array) => new Span<T>(Unsafe.AsPointer(ref array._item0), 2);
            internal static ref T At(ref Fixed2<T> array, int i) => ref AsSpan(ref array)[i];
        }
    }

    internal struct Fixed3<T> : IFixedArray<T>
    {
        private T _item0;
        private T _item1;
        private T _item2;

        internal Fixed3(T item0, T item1, T item2) =>
            (_item0, _item1, _item2) = (item0, item1, item2);

        public static implicit operator Fixed3<T>((T, T, T) tuple) =>
            new Fixed3<T>(tuple.Item1, tuple.Item2, tuple.Item3);

        public int Length => 3;
        public T this[int i]
        {
            get => Helper.At(ref this, i);
            set => Helper.At(ref this, i) = value;
        }

        private static class Helper
        {
            internal static unsafe Span<T> AsSpan(ref Fixed3<T> array) => new Span<T>(Unsafe.AsPointer(ref array._item0), 3);
            internal static ref T At(ref Fixed3<T> array, int i) => ref AsSpan(ref array)[i];
        }
    }

    internal struct Fixed4<T> : IFixedArray<T>
    {
        private T _item0;
        private T _item1;
        private T _item2;
        private T _item3;

        internal Fixed4(T item0, T item1, T item2, T item3) =>
            (_item0, _item1, _item2, _item3) = (item0, item1, item2, item3);

        public static implicit operator Fixed4<T>((T, T, T, T) tuple) =>
            new Fixed4<T>(tuple.Item1, tuple.Item2, tuple.Item3, tuple.Item4);

        public int Length => 4;
        public T this[int i]
        {
            get => Helper.At(ref this, i);
            set => Helper.At(ref this, i) = value;
        }

        private static class Helper
        {
            internal static unsafe Span<T> AsSpan(ref Fixed4<T> array) => new Span<T>(Unsafe.AsPointer(ref array._item0), 4);
            internal static ref T At(ref Fixed4<T> array, int i) => ref AsSpan(ref array)[i];
        }
    }

    internal struct Fixed5<T> : IFixedArray<T>
    {
        private T _item0;
        private T _item1;
        private T _item2;
        private T _item3;
        private T _item4;

        internal Fixed5(T item0, T item1, T item2, T item3, T item4) =>
            (_item0, _item1, _item2, _item3, _item4) = (item0, item1, item2, item3, item4);

        public static implicit operator Fixed5<T>((T, T, T, T, T) tuple) =>
            new Fixed5<T>(tuple.Item1, tuple.Item2, tuple.Item3, tuple.Item4, tuple.Item5);

        public int Length => 5;
        public T this[int i]
        {
            get => Helper.At(ref this, i);
            set => Helper.At(ref this, i) = value;
        }

        private static class Helper
        {
            internal static unsafe Span<T> AsSpan(ref Fixed5<T> array) => new Span<T>(Unsafe.AsPointer(ref array._item0), 5);
            internal static ref T At(ref Fixed5<T> array, int i) => ref AsSpan(ref array)[i];
        }
    }

    internal struct Fixed6<T> : IFixedArray<T>
    {
        private T _item0;
        private T _item1;
        private T _item2;
        private T _item3;
        private T _item4;
        private T _item5;

        internal Fixed6(T item0, T item1, T item2, T item3, T item4, T item5) =>
            (_item0, _item1, _item2, _item3, _item4, _item5) = (item0, item1, item2, item3, item4, item5);

        public static implicit operator Fixed6<T>((T, T, T, T, T, T) tuple) =>
            new Fixed6<T>(tuple.Item1, tuple.Item2, tuple.Item3, tuple.Item4, tuple.Item5, tuple.Item6);

        public int Length => 6;
        public T this[int i]
        {
            get => Helper.At(ref this, i);
            set => Helper.At(ref this, i) = value;
        }

        private static class Helper
        {
            internal static unsafe Span<T> AsSpan(ref Fixed6<T> array) => new Span<T>(Unsafe.AsPointer(ref array._item0), 6);
            internal static ref T At(ref Fixed6<T> array, int i) => ref AsSpan(ref array)[i];
        }
    }

    #endregion fixed arrays
}

////////////////////////////////////////////////////////////////////////////////////////////////

namespace Anatawa12.AnimatorControllerAsACode.Framework
{

    #region wrapper types

    public class IntSettingCurve
    {
        private readonly SettingCurveImpl<int, IntTypeInfo, Fixed1<EditorCurveBinding>, Fixed1<float>, Fixed1<List<Keyframe>>> _impl;

        internal IntSettingCurve(AnimationClip clip, EditorCurveBinding binding)
        {
            _impl = new SettingCurveImpl<int, IntTypeInfo, Fixed1<EditorCurveBinding>, Fixed1<float>, Fixed1<List<Keyframe>>>(clip, binding);
        }

        public IntSettingCurve WithOneFrame(int desiredValue)
        {
            _impl.WithOneFrame(desiredValue);
            return this;
        }

        public IntSettingCurve WithFixedSeconds(float seconds, int desiredValue)
        {
            _impl.WithFixedSeconds(seconds, desiredValue);
            return this;
        }

        public IntSettingCurve WithSecondsUnit(Action<IntSettingKeyframes> action)
        {
            _impl.WithSecondsUnit(impl => action(new IntSettingKeyframes(impl)));
            return this;
        }

        public IntSettingCurve WithFrameCountUnit(Action<IntSettingKeyframes> action)
        {
            _impl.WithFrameCountUnit(impl => action(new IntSettingKeyframes(impl)));
            return this;
        }

        public IntSettingCurve WithUnit(AccUnit unit, Action<IntSettingKeyframes> action)
        {
            _impl.WithUnit(unit, impl => action(new IntSettingKeyframes(impl)));
            return this;
        }

    }

    public class IntSettingKeyframes
    {
        private readonly SettingKeyframesImpl<int, IntTypeInfo, Fixed1<EditorCurveBinding>, Fixed1<float>, Fixed1<List<Keyframe>>> _impl;

        internal IntSettingKeyframes(SettingKeyframesImpl<int, IntTypeInfo, Fixed1<EditorCurveBinding>, Fixed1<float>, Fixed1<List<Keyframe>>> impl)
        {
            _impl = impl;
        }

        public IntSettingKeyframes Easing(float timeInUnit, int value)
        {
            _impl.Easing(timeInUnit, value);
            return this;
        }

        public IntSettingKeyframes Constant(float timeInUnit, int value)
        {
            _impl.Constant(timeInUnit, value);
            return this;
        }

        public IntSettingKeyframes Linear(float timeInUnit, int value)
        {
            _impl.Linear(timeInUnit, value);
            return this;
        }
    }


    public class BoolSettingCurve
    {
        private readonly SettingCurveImpl<bool, BoolTypeInfo, Fixed1<EditorCurveBinding>, Fixed1<float>, Fixed1<List<Keyframe>>> _impl;

        internal BoolSettingCurve(AnimationClip clip, EditorCurveBinding binding)
        {
            _impl = new SettingCurveImpl<bool, BoolTypeInfo, Fixed1<EditorCurveBinding>, Fixed1<float>, Fixed1<List<Keyframe>>>(clip, binding);
        }

        public BoolSettingCurve WithOneFrame(bool desiredValue)
        {
            _impl.WithOneFrame(desiredValue);
            return this;
        }

        public BoolSettingCurve WithFixedSeconds(float seconds, bool desiredValue)
        {
            _impl.WithFixedSeconds(seconds, desiredValue);
            return this;
        }

        public BoolSettingCurve WithSecondsUnit(Action<BoolSettingKeyframes> action)
        {
            _impl.WithSecondsUnit(impl => action(new BoolSettingKeyframes(impl)));
            return this;
        }

        public BoolSettingCurve WithFrameCountUnit(Action<BoolSettingKeyframes> action)
        {
            _impl.WithFrameCountUnit(impl => action(new BoolSettingKeyframes(impl)));
            return this;
        }

        public BoolSettingCurve WithUnit(AccUnit unit, Action<BoolSettingKeyframes> action)
        {
            _impl.WithUnit(unit, impl => action(new BoolSettingKeyframes(impl)));
            return this;
        }

    }

    public class BoolSettingKeyframes
    {
        private readonly SettingKeyframesImpl<bool, BoolTypeInfo, Fixed1<EditorCurveBinding>, Fixed1<float>, Fixed1<List<Keyframe>>> _impl;

        internal BoolSettingKeyframes(SettingKeyframesImpl<bool, BoolTypeInfo, Fixed1<EditorCurveBinding>, Fixed1<float>, Fixed1<List<Keyframe>>> impl)
        {
            _impl = impl;
        }

        public BoolSettingKeyframes Easing(float timeInUnit, bool value)
        {
            _impl.Easing(timeInUnit, value);
            return this;
        }

        public BoolSettingKeyframes Constant(float timeInUnit, bool value)
        {
            _impl.Constant(timeInUnit, value);
            return this;
        }

        public BoolSettingKeyframes Linear(float timeInUnit, bool value)
        {
            _impl.Linear(timeInUnit, value);
            return this;
        }
    }


    public class FloatSettingCurve
    {
        private readonly SettingCurveImpl<float, FloatTypeInfo, Fixed1<EditorCurveBinding>, Fixed1<float>, Fixed1<List<Keyframe>>> _impl;

        internal FloatSettingCurve(AnimationClip clip, EditorCurveBinding binding)
        {
            _impl = new SettingCurveImpl<float, FloatTypeInfo, Fixed1<EditorCurveBinding>, Fixed1<float>, Fixed1<List<Keyframe>>>(clip, binding);
        }

        public FloatSettingCurve WithOneFrame(float desiredValue)
        {
            _impl.WithOneFrame(desiredValue);
            return this;
        }

        public FloatSettingCurve WithFixedSeconds(float seconds, float desiredValue)
        {
            _impl.WithFixedSeconds(seconds, desiredValue);
            return this;
        }

        public FloatSettingCurve WithSecondsUnit(Action<FloatSettingKeyframes> action)
        {
            _impl.WithSecondsUnit(impl => action(new FloatSettingKeyframes(impl)));
            return this;
        }

        public FloatSettingCurve WithFrameCountUnit(Action<FloatSettingKeyframes> action)
        {
            _impl.WithFrameCountUnit(impl => action(new FloatSettingKeyframes(impl)));
            return this;
        }

        public FloatSettingCurve WithUnit(AccUnit unit, Action<FloatSettingKeyframes> action)
        {
            _impl.WithUnit(unit, impl => action(new FloatSettingKeyframes(impl)));
            return this;
        }

    }

    public class FloatSettingKeyframes
    {
        private readonly SettingKeyframesImpl<float, FloatTypeInfo, Fixed1<EditorCurveBinding>, Fixed1<float>, Fixed1<List<Keyframe>>> _impl;

        internal FloatSettingKeyframes(SettingKeyframesImpl<float, FloatTypeInfo, Fixed1<EditorCurveBinding>, Fixed1<float>, Fixed1<List<Keyframe>>> impl)
        {
            _impl = impl;
        }

        public FloatSettingKeyframes Easing(float timeInUnit, float value)
        {
            _impl.Easing(timeInUnit, value);
            return this;
        }

        public FloatSettingKeyframes Constant(float timeInUnit, float value)
        {
            _impl.Constant(timeInUnit, value);
            return this;
        }

        public FloatSettingKeyframes Linear(float timeInUnit, float value)
        {
            _impl.Linear(timeInUnit, value);
            return this;
        }
    }


    public class ColorSettingCurve
    {
        private readonly SettingCurveImpl<Color, ColorTypeInfo, Fixed4<EditorCurveBinding>, Fixed4<float>, Fixed4<List<Keyframe>>> _impl;

        internal ColorSettingCurve(AnimationClip clip, EditorCurveBinding binding)
        {
            _impl = new SettingCurveImpl<Color, ColorTypeInfo, Fixed4<EditorCurveBinding>, Fixed4<float>, Fixed4<List<Keyframe>>>(clip, binding);
        }

        public ColorSettingCurve WithOneFrame(Color desiredValue)
        {
            _impl.WithOneFrame(desiredValue);
            return this;
        }

        public ColorSettingCurve WithFixedSeconds(float seconds, Color desiredValue)
        {
            _impl.WithFixedSeconds(seconds, desiredValue);
            return this;
        }

        public ColorSettingCurve WithSecondsUnit(Action<ColorSettingKeyframes> action)
        {
            _impl.WithSecondsUnit(impl => action(new ColorSettingKeyframes(impl)));
            return this;
        }

        public ColorSettingCurve WithFrameCountUnit(Action<ColorSettingKeyframes> action)
        {
            _impl.WithFrameCountUnit(impl => action(new ColorSettingKeyframes(impl)));
            return this;
        }

        public ColorSettingCurve WithUnit(AccUnit unit, Action<ColorSettingKeyframes> action)
        {
            _impl.WithUnit(unit, impl => action(new ColorSettingKeyframes(impl)));
            return this;
        }

    }

    public class ColorSettingKeyframes
    {
        private readonly SettingKeyframesImpl<Color, ColorTypeInfo, Fixed4<EditorCurveBinding>, Fixed4<float>, Fixed4<List<Keyframe>>> _impl;

        internal ColorSettingKeyframes(SettingKeyframesImpl<Color, ColorTypeInfo, Fixed4<EditorCurveBinding>, Fixed4<float>, Fixed4<List<Keyframe>>> impl)
        {
            _impl = impl;
        }

        public ColorSettingKeyframes Easing(float timeInUnit, Color value)
        {
            _impl.Easing(timeInUnit, value);
            return this;
        }

        public ColorSettingKeyframes Constant(float timeInUnit, Color value)
        {
            _impl.Constant(timeInUnit, value);
            return this;
        }

        public ColorSettingKeyframes Linear(float timeInUnit, Color value)
        {
            _impl.Linear(timeInUnit, value);
            return this;
        }
    }


    public class Vector2SettingCurve
    {
        private readonly SettingCurveImpl<Vector2, Vector2TypeInfo, Fixed2<EditorCurveBinding>, Fixed2<float>, Fixed2<List<Keyframe>>> _impl;

        internal Vector2SettingCurve(AnimationClip clip, EditorCurveBinding binding)
        {
            _impl = new SettingCurveImpl<Vector2, Vector2TypeInfo, Fixed2<EditorCurveBinding>, Fixed2<float>, Fixed2<List<Keyframe>>>(clip, binding);
        }

        public Vector2SettingCurve WithOneFrame(Vector2 desiredValue)
        {
            _impl.WithOneFrame(desiredValue);
            return this;
        }

        public Vector2SettingCurve WithFixedSeconds(float seconds, Vector2 desiredValue)
        {
            _impl.WithFixedSeconds(seconds, desiredValue);
            return this;
        }

        public Vector2SettingCurve WithSecondsUnit(Action<Vector2SettingKeyframes> action)
        {
            _impl.WithSecondsUnit(impl => action(new Vector2SettingKeyframes(impl)));
            return this;
        }

        public Vector2SettingCurve WithFrameCountUnit(Action<Vector2SettingKeyframes> action)
        {
            _impl.WithFrameCountUnit(impl => action(new Vector2SettingKeyframes(impl)));
            return this;
        }

        public Vector2SettingCurve WithUnit(AccUnit unit, Action<Vector2SettingKeyframes> action)
        {
            _impl.WithUnit(unit, impl => action(new Vector2SettingKeyframes(impl)));
            return this;
        }

    }

    public class Vector2SettingKeyframes
    {
        private readonly SettingKeyframesImpl<Vector2, Vector2TypeInfo, Fixed2<EditorCurveBinding>, Fixed2<float>, Fixed2<List<Keyframe>>> _impl;

        internal Vector2SettingKeyframes(SettingKeyframesImpl<Vector2, Vector2TypeInfo, Fixed2<EditorCurveBinding>, Fixed2<float>, Fixed2<List<Keyframe>>> impl)
        {
            _impl = impl;
        }

        public Vector2SettingKeyframes Easing(float timeInUnit, Vector2 value)
        {
            _impl.Easing(timeInUnit, value);
            return this;
        }

        public Vector2SettingKeyframes Constant(float timeInUnit, Vector2 value)
        {
            _impl.Constant(timeInUnit, value);
            return this;
        }

        public Vector2SettingKeyframes Linear(float timeInUnit, Vector2 value)
        {
            _impl.Linear(timeInUnit, value);
            return this;
        }
    }


    public class Vector2IntSettingCurve
    {
        private readonly SettingCurveImpl<Vector2Int, Vector2IntTypeInfo, Fixed2<EditorCurveBinding>, Fixed2<float>, Fixed2<List<Keyframe>>> _impl;

        internal Vector2IntSettingCurve(AnimationClip clip, EditorCurveBinding binding)
        {
            _impl = new SettingCurveImpl<Vector2Int, Vector2IntTypeInfo, Fixed2<EditorCurveBinding>, Fixed2<float>, Fixed2<List<Keyframe>>>(clip, binding);
        }

        public Vector2IntSettingCurve WithOneFrame(Vector2Int desiredValue)
        {
            _impl.WithOneFrame(desiredValue);
            return this;
        }

        public Vector2IntSettingCurve WithFixedSeconds(float seconds, Vector2Int desiredValue)
        {
            _impl.WithFixedSeconds(seconds, desiredValue);
            return this;
        }

        public Vector2IntSettingCurve WithSecondsUnit(Action<Vector2IntSettingKeyframes> action)
        {
            _impl.WithSecondsUnit(impl => action(new Vector2IntSettingKeyframes(impl)));
            return this;
        }

        public Vector2IntSettingCurve WithFrameCountUnit(Action<Vector2IntSettingKeyframes> action)
        {
            _impl.WithFrameCountUnit(impl => action(new Vector2IntSettingKeyframes(impl)));
            return this;
        }

        public Vector2IntSettingCurve WithUnit(AccUnit unit, Action<Vector2IntSettingKeyframes> action)
        {
            _impl.WithUnit(unit, impl => action(new Vector2IntSettingKeyframes(impl)));
            return this;
        }

    }

    public class Vector2IntSettingKeyframes
    {
        private readonly SettingKeyframesImpl<Vector2Int, Vector2IntTypeInfo, Fixed2<EditorCurveBinding>, Fixed2<float>, Fixed2<List<Keyframe>>> _impl;

        internal Vector2IntSettingKeyframes(SettingKeyframesImpl<Vector2Int, Vector2IntTypeInfo, Fixed2<EditorCurveBinding>, Fixed2<float>, Fixed2<List<Keyframe>>> impl)
        {
            _impl = impl;
        }

        public Vector2IntSettingKeyframes Easing(float timeInUnit, Vector2Int value)
        {
            _impl.Easing(timeInUnit, value);
            return this;
        }

        public Vector2IntSettingKeyframes Constant(float timeInUnit, Vector2Int value)
        {
            _impl.Constant(timeInUnit, value);
            return this;
        }

        public Vector2IntSettingKeyframes Linear(float timeInUnit, Vector2Int value)
        {
            _impl.Linear(timeInUnit, value);
            return this;
        }
    }


    public class Vector3SettingCurve
    {
        private readonly SettingCurveImpl<Vector3, Vector3TypeInfo, Fixed3<EditorCurveBinding>, Fixed3<float>, Fixed3<List<Keyframe>>> _impl;

        internal Vector3SettingCurve(AnimationClip clip, EditorCurveBinding binding)
        {
            _impl = new SettingCurveImpl<Vector3, Vector3TypeInfo, Fixed3<EditorCurveBinding>, Fixed3<float>, Fixed3<List<Keyframe>>>(clip, binding);
        }

        public Vector3SettingCurve WithOneFrame(Vector3 desiredValue)
        {
            _impl.WithOneFrame(desiredValue);
            return this;
        }

        public Vector3SettingCurve WithFixedSeconds(float seconds, Vector3 desiredValue)
        {
            _impl.WithFixedSeconds(seconds, desiredValue);
            return this;
        }

        public Vector3SettingCurve WithSecondsUnit(Action<Vector3SettingKeyframes> action)
        {
            _impl.WithSecondsUnit(impl => action(new Vector3SettingKeyframes(impl)));
            return this;
        }

        public Vector3SettingCurve WithFrameCountUnit(Action<Vector3SettingKeyframes> action)
        {
            _impl.WithFrameCountUnit(impl => action(new Vector3SettingKeyframes(impl)));
            return this;
        }

        public Vector3SettingCurve WithUnit(AccUnit unit, Action<Vector3SettingKeyframes> action)
        {
            _impl.WithUnit(unit, impl => action(new Vector3SettingKeyframes(impl)));
            return this;
        }

    }

    public class Vector3SettingKeyframes
    {
        private readonly SettingKeyframesImpl<Vector3, Vector3TypeInfo, Fixed3<EditorCurveBinding>, Fixed3<float>, Fixed3<List<Keyframe>>> _impl;

        internal Vector3SettingKeyframes(SettingKeyframesImpl<Vector3, Vector3TypeInfo, Fixed3<EditorCurveBinding>, Fixed3<float>, Fixed3<List<Keyframe>>> impl)
        {
            _impl = impl;
        }

        public Vector3SettingKeyframes Easing(float timeInUnit, Vector3 value)
        {
            _impl.Easing(timeInUnit, value);
            return this;
        }

        public Vector3SettingKeyframes Constant(float timeInUnit, Vector3 value)
        {
            _impl.Constant(timeInUnit, value);
            return this;
        }

        public Vector3SettingKeyframes Linear(float timeInUnit, Vector3 value)
        {
            _impl.Linear(timeInUnit, value);
            return this;
        }
    }


    public class Vector3IntSettingCurve
    {
        private readonly SettingCurveImpl<Vector3Int, Vector3IntTypeInfo, Fixed3<EditorCurveBinding>, Fixed3<float>, Fixed3<List<Keyframe>>> _impl;

        internal Vector3IntSettingCurve(AnimationClip clip, EditorCurveBinding binding)
        {
            _impl = new SettingCurveImpl<Vector3Int, Vector3IntTypeInfo, Fixed3<EditorCurveBinding>, Fixed3<float>, Fixed3<List<Keyframe>>>(clip, binding);
        }

        public Vector3IntSettingCurve WithOneFrame(Vector3Int desiredValue)
        {
            _impl.WithOneFrame(desiredValue);
            return this;
        }

        public Vector3IntSettingCurve WithFixedSeconds(float seconds, Vector3Int desiredValue)
        {
            _impl.WithFixedSeconds(seconds, desiredValue);
            return this;
        }

        public Vector3IntSettingCurve WithSecondsUnit(Action<Vector3IntSettingKeyframes> action)
        {
            _impl.WithSecondsUnit(impl => action(new Vector3IntSettingKeyframes(impl)));
            return this;
        }

        public Vector3IntSettingCurve WithFrameCountUnit(Action<Vector3IntSettingKeyframes> action)
        {
            _impl.WithFrameCountUnit(impl => action(new Vector3IntSettingKeyframes(impl)));
            return this;
        }

        public Vector3IntSettingCurve WithUnit(AccUnit unit, Action<Vector3IntSettingKeyframes> action)
        {
            _impl.WithUnit(unit, impl => action(new Vector3IntSettingKeyframes(impl)));
            return this;
        }

    }

    public class Vector3IntSettingKeyframes
    {
        private readonly SettingKeyframesImpl<Vector3Int, Vector3IntTypeInfo, Fixed3<EditorCurveBinding>, Fixed3<float>, Fixed3<List<Keyframe>>> _impl;

        internal Vector3IntSettingKeyframes(SettingKeyframesImpl<Vector3Int, Vector3IntTypeInfo, Fixed3<EditorCurveBinding>, Fixed3<float>, Fixed3<List<Keyframe>>> impl)
        {
            _impl = impl;
        }

        public Vector3IntSettingKeyframes Easing(float timeInUnit, Vector3Int value)
        {
            _impl.Easing(timeInUnit, value);
            return this;
        }

        public Vector3IntSettingKeyframes Constant(float timeInUnit, Vector3Int value)
        {
            _impl.Constant(timeInUnit, value);
            return this;
        }

        public Vector3IntSettingKeyframes Linear(float timeInUnit, Vector3Int value)
        {
            _impl.Linear(timeInUnit, value);
            return this;
        }
    }


    public class Vector4SettingCurve
    {
        private readonly SettingCurveImpl<Vector4, Vector4TypeInfo, Fixed4<EditorCurveBinding>, Fixed4<float>, Fixed4<List<Keyframe>>> _impl;

        internal Vector4SettingCurve(AnimationClip clip, EditorCurveBinding binding)
        {
            _impl = new SettingCurveImpl<Vector4, Vector4TypeInfo, Fixed4<EditorCurveBinding>, Fixed4<float>, Fixed4<List<Keyframe>>>(clip, binding);
        }

        public Vector4SettingCurve WithOneFrame(Vector4 desiredValue)
        {
            _impl.WithOneFrame(desiredValue);
            return this;
        }

        public Vector4SettingCurve WithFixedSeconds(float seconds, Vector4 desiredValue)
        {
            _impl.WithFixedSeconds(seconds, desiredValue);
            return this;
        }

        public Vector4SettingCurve WithSecondsUnit(Action<Vector4SettingKeyframes> action)
        {
            _impl.WithSecondsUnit(impl => action(new Vector4SettingKeyframes(impl)));
            return this;
        }

        public Vector4SettingCurve WithFrameCountUnit(Action<Vector4SettingKeyframes> action)
        {
            _impl.WithFrameCountUnit(impl => action(new Vector4SettingKeyframes(impl)));
            return this;
        }

        public Vector4SettingCurve WithUnit(AccUnit unit, Action<Vector4SettingKeyframes> action)
        {
            _impl.WithUnit(unit, impl => action(new Vector4SettingKeyframes(impl)));
            return this;
        }

    }

    public class Vector4SettingKeyframes
    {
        private readonly SettingKeyframesImpl<Vector4, Vector4TypeInfo, Fixed4<EditorCurveBinding>, Fixed4<float>, Fixed4<List<Keyframe>>> _impl;

        internal Vector4SettingKeyframes(SettingKeyframesImpl<Vector4, Vector4TypeInfo, Fixed4<EditorCurveBinding>, Fixed4<float>, Fixed4<List<Keyframe>>> impl)
        {
            _impl = impl;
        }

        public Vector4SettingKeyframes Easing(float timeInUnit, Vector4 value)
        {
            _impl.Easing(timeInUnit, value);
            return this;
        }

        public Vector4SettingKeyframes Constant(float timeInUnit, Vector4 value)
        {
            _impl.Constant(timeInUnit, value);
            return this;
        }

        public Vector4SettingKeyframes Linear(float timeInUnit, Vector4 value)
        {
            _impl.Linear(timeInUnit, value);
            return this;
        }
    }


    public class QuaternionSettingCurve
    {
        private readonly SettingCurveImpl<Quaternion, QuaternionTypeInfo, Fixed4<EditorCurveBinding>, Fixed4<float>, Fixed4<List<Keyframe>>> _impl;

        internal QuaternionSettingCurve(AnimationClip clip, EditorCurveBinding binding)
        {
            _impl = new SettingCurveImpl<Quaternion, QuaternionTypeInfo, Fixed4<EditorCurveBinding>, Fixed4<float>, Fixed4<List<Keyframe>>>(clip, binding);
        }

        public QuaternionSettingCurve WithOneFrame(Quaternion desiredValue)
        {
            _impl.WithOneFrame(desiredValue);
            return this;
        }

        public QuaternionSettingCurve WithFixedSeconds(float seconds, Quaternion desiredValue)
        {
            _impl.WithFixedSeconds(seconds, desiredValue);
            return this;
        }

        public QuaternionSettingCurve WithSecondsUnit(Action<QuaternionSettingKeyframes> action)
        {
            _impl.WithSecondsUnit(impl => action(new QuaternionSettingKeyframes(impl)));
            return this;
        }

        public QuaternionSettingCurve WithFrameCountUnit(Action<QuaternionSettingKeyframes> action)
        {
            _impl.WithFrameCountUnit(impl => action(new QuaternionSettingKeyframes(impl)));
            return this;
        }

        public QuaternionSettingCurve WithUnit(AccUnit unit, Action<QuaternionSettingKeyframes> action)
        {
            _impl.WithUnit(unit, impl => action(new QuaternionSettingKeyframes(impl)));
            return this;
        }

    }

    public class QuaternionSettingKeyframes
    {
        private readonly SettingKeyframesImpl<Quaternion, QuaternionTypeInfo, Fixed4<EditorCurveBinding>, Fixed4<float>, Fixed4<List<Keyframe>>> _impl;

        internal QuaternionSettingKeyframes(SettingKeyframesImpl<Quaternion, QuaternionTypeInfo, Fixed4<EditorCurveBinding>, Fixed4<float>, Fixed4<List<Keyframe>>> impl)
        {
            _impl = impl;
        }

        public QuaternionSettingKeyframes Easing(float timeInUnit, Quaternion value)
        {
            _impl.Easing(timeInUnit, value);
            return this;
        }

        public QuaternionSettingKeyframes Constant(float timeInUnit, Quaternion value)
        {
            _impl.Constant(timeInUnit, value);
            return this;
        }

        public QuaternionSettingKeyframes Linear(float timeInUnit, Quaternion value)
        {
            _impl.Linear(timeInUnit, value);
            return this;
        }
    }


    public class RectSettingCurve
    {
        private readonly SettingCurveImpl<Rect, RectTypeInfo, Fixed4<EditorCurveBinding>, Fixed4<float>, Fixed4<List<Keyframe>>> _impl;

        internal RectSettingCurve(AnimationClip clip, EditorCurveBinding binding)
        {
            _impl = new SettingCurveImpl<Rect, RectTypeInfo, Fixed4<EditorCurveBinding>, Fixed4<float>, Fixed4<List<Keyframe>>>(clip, binding);
        }

        public RectSettingCurve WithOneFrame(Rect desiredValue)
        {
            _impl.WithOneFrame(desiredValue);
            return this;
        }

        public RectSettingCurve WithFixedSeconds(float seconds, Rect desiredValue)
        {
            _impl.WithFixedSeconds(seconds, desiredValue);
            return this;
        }

        public RectSettingCurve WithSecondsUnit(Action<RectSettingKeyframes> action)
        {
            _impl.WithSecondsUnit(impl => action(new RectSettingKeyframes(impl)));
            return this;
        }

        public RectSettingCurve WithFrameCountUnit(Action<RectSettingKeyframes> action)
        {
            _impl.WithFrameCountUnit(impl => action(new RectSettingKeyframes(impl)));
            return this;
        }

        public RectSettingCurve WithUnit(AccUnit unit, Action<RectSettingKeyframes> action)
        {
            _impl.WithUnit(unit, impl => action(new RectSettingKeyframes(impl)));
            return this;
        }

    }

    public class RectSettingKeyframes
    {
        private readonly SettingKeyframesImpl<Rect, RectTypeInfo, Fixed4<EditorCurveBinding>, Fixed4<float>, Fixed4<List<Keyframe>>> _impl;

        internal RectSettingKeyframes(SettingKeyframesImpl<Rect, RectTypeInfo, Fixed4<EditorCurveBinding>, Fixed4<float>, Fixed4<List<Keyframe>>> impl)
        {
            _impl = impl;
        }

        public RectSettingKeyframes Easing(float timeInUnit, Rect value)
        {
            _impl.Easing(timeInUnit, value);
            return this;
        }

        public RectSettingKeyframes Constant(float timeInUnit, Rect value)
        {
            _impl.Constant(timeInUnit, value);
            return this;
        }

        public RectSettingKeyframes Linear(float timeInUnit, Rect value)
        {
            _impl.Linear(timeInUnit, value);
            return this;
        }
    }


    public class RectIntSettingCurve
    {
        private readonly SettingCurveImpl<RectInt, RectIntTypeInfo, Fixed4<EditorCurveBinding>, Fixed4<float>, Fixed4<List<Keyframe>>> _impl;

        internal RectIntSettingCurve(AnimationClip clip, EditorCurveBinding binding)
        {
            _impl = new SettingCurveImpl<RectInt, RectIntTypeInfo, Fixed4<EditorCurveBinding>, Fixed4<float>, Fixed4<List<Keyframe>>>(clip, binding);
        }

        public RectIntSettingCurve WithOneFrame(RectInt desiredValue)
        {
            _impl.WithOneFrame(desiredValue);
            return this;
        }

        public RectIntSettingCurve WithFixedSeconds(float seconds, RectInt desiredValue)
        {
            _impl.WithFixedSeconds(seconds, desiredValue);
            return this;
        }

        public RectIntSettingCurve WithSecondsUnit(Action<RectIntSettingKeyframes> action)
        {
            _impl.WithSecondsUnit(impl => action(new RectIntSettingKeyframes(impl)));
            return this;
        }

        public RectIntSettingCurve WithFrameCountUnit(Action<RectIntSettingKeyframes> action)
        {
            _impl.WithFrameCountUnit(impl => action(new RectIntSettingKeyframes(impl)));
            return this;
        }

        public RectIntSettingCurve WithUnit(AccUnit unit, Action<RectIntSettingKeyframes> action)
        {
            _impl.WithUnit(unit, impl => action(new RectIntSettingKeyframes(impl)));
            return this;
        }

    }

    public class RectIntSettingKeyframes
    {
        private readonly SettingKeyframesImpl<RectInt, RectIntTypeInfo, Fixed4<EditorCurveBinding>, Fixed4<float>, Fixed4<List<Keyframe>>> _impl;

        internal RectIntSettingKeyframes(SettingKeyframesImpl<RectInt, RectIntTypeInfo, Fixed4<EditorCurveBinding>, Fixed4<float>, Fixed4<List<Keyframe>>> impl)
        {
            _impl = impl;
        }

        public RectIntSettingKeyframes Easing(float timeInUnit, RectInt value)
        {
            _impl.Easing(timeInUnit, value);
            return this;
        }

        public RectIntSettingKeyframes Constant(float timeInUnit, RectInt value)
        {
            _impl.Constant(timeInUnit, value);
            return this;
        }

        public RectIntSettingKeyframes Linear(float timeInUnit, RectInt value)
        {
            _impl.Linear(timeInUnit, value);
            return this;
        }
    }


    public class BoundsSettingCurve
    {
        private readonly SettingCurveImpl<Bounds, BoundsTypeInfo, Fixed6<EditorCurveBinding>, Fixed6<float>, Fixed6<List<Keyframe>>> _impl;

        internal BoundsSettingCurve(AnimationClip clip, EditorCurveBinding binding)
        {
            _impl = new SettingCurveImpl<Bounds, BoundsTypeInfo, Fixed6<EditorCurveBinding>, Fixed6<float>, Fixed6<List<Keyframe>>>(clip, binding);
        }

        public BoundsSettingCurve WithOneFrame(Bounds desiredValue)
        {
            _impl.WithOneFrame(desiredValue);
            return this;
        }

        public BoundsSettingCurve WithFixedSeconds(float seconds, Bounds desiredValue)
        {
            _impl.WithFixedSeconds(seconds, desiredValue);
            return this;
        }

        public BoundsSettingCurve WithSecondsUnit(Action<BoundsSettingKeyframes> action)
        {
            _impl.WithSecondsUnit(impl => action(new BoundsSettingKeyframes(impl)));
            return this;
        }

        public BoundsSettingCurve WithFrameCountUnit(Action<BoundsSettingKeyframes> action)
        {
            _impl.WithFrameCountUnit(impl => action(new BoundsSettingKeyframes(impl)));
            return this;
        }

        public BoundsSettingCurve WithUnit(AccUnit unit, Action<BoundsSettingKeyframes> action)
        {
            _impl.WithUnit(unit, impl => action(new BoundsSettingKeyframes(impl)));
            return this;
        }

    }

    public class BoundsSettingKeyframes
    {
        private readonly SettingKeyframesImpl<Bounds, BoundsTypeInfo, Fixed6<EditorCurveBinding>, Fixed6<float>, Fixed6<List<Keyframe>>> _impl;

        internal BoundsSettingKeyframes(SettingKeyframesImpl<Bounds, BoundsTypeInfo, Fixed6<EditorCurveBinding>, Fixed6<float>, Fixed6<List<Keyframe>>> impl)
        {
            _impl = impl;
        }

        public BoundsSettingKeyframes Easing(float timeInUnit, Bounds value)
        {
            _impl.Easing(timeInUnit, value);
            return this;
        }

        public BoundsSettingKeyframes Constant(float timeInUnit, Bounds value)
        {
            _impl.Constant(timeInUnit, value);
            return this;
        }

        public BoundsSettingKeyframes Linear(float timeInUnit, Bounds value)
        {
            _impl.Linear(timeInUnit, value);
            return this;
        }
    }


    public class BoundsIntSettingCurve
    {
        private readonly SettingCurveImpl<BoundsInt, BoundsIntTypeInfo, Fixed6<EditorCurveBinding>, Fixed6<float>, Fixed6<List<Keyframe>>> _impl;

        internal BoundsIntSettingCurve(AnimationClip clip, EditorCurveBinding binding)
        {
            _impl = new SettingCurveImpl<BoundsInt, BoundsIntTypeInfo, Fixed6<EditorCurveBinding>, Fixed6<float>, Fixed6<List<Keyframe>>>(clip, binding);
        }

        public BoundsIntSettingCurve WithOneFrame(BoundsInt desiredValue)
        {
            _impl.WithOneFrame(desiredValue);
            return this;
        }

        public BoundsIntSettingCurve WithFixedSeconds(float seconds, BoundsInt desiredValue)
        {
            _impl.WithFixedSeconds(seconds, desiredValue);
            return this;
        }

        public BoundsIntSettingCurve WithSecondsUnit(Action<BoundsIntSettingKeyframes> action)
        {
            _impl.WithSecondsUnit(impl => action(new BoundsIntSettingKeyframes(impl)));
            return this;
        }

        public BoundsIntSettingCurve WithFrameCountUnit(Action<BoundsIntSettingKeyframes> action)
        {
            _impl.WithFrameCountUnit(impl => action(new BoundsIntSettingKeyframes(impl)));
            return this;
        }

        public BoundsIntSettingCurve WithUnit(AccUnit unit, Action<BoundsIntSettingKeyframes> action)
        {
            _impl.WithUnit(unit, impl => action(new BoundsIntSettingKeyframes(impl)));
            return this;
        }

    }

    public class BoundsIntSettingKeyframes
    {
        private readonly SettingKeyframesImpl<BoundsInt, BoundsIntTypeInfo, Fixed6<EditorCurveBinding>, Fixed6<float>, Fixed6<List<Keyframe>>> _impl;

        internal BoundsIntSettingKeyframes(SettingKeyframesImpl<BoundsInt, BoundsIntTypeInfo, Fixed6<EditorCurveBinding>, Fixed6<float>, Fixed6<List<Keyframe>>> impl)
        {
            _impl = impl;
        }

        public BoundsIntSettingKeyframes Easing(float timeInUnit, BoundsInt value)
        {
            _impl.Easing(timeInUnit, value);
            return this;
        }

        public BoundsIntSettingKeyframes Constant(float timeInUnit, BoundsInt value)
        {
            _impl.Constant(timeInUnit, value);
            return this;
        }

        public BoundsIntSettingKeyframes Linear(float timeInUnit, BoundsInt value)
        {
            _impl.Linear(timeInUnit, value);
            return this;
        }
    }



    #endregion wrapper types

    #region AccEditClip Animates function

    public partial struct AccEditClip
    {

        public IntSettingCurve AnimatesInt(string path, Type type, string propertyName)
        {
            var binding = new EditorCurveBinding
            {
                path = path,
                type = type,
                propertyName = propertyName
            };
            return new IntSettingCurve(_clip, binding);
        }

        public IntSettingCurve AnimatesInt(Transform transform, Type type, string propertyName) =>
            AnimatesInt(_config.ResolveRelativePath(transform), type, propertyName);

        public IntSettingCurve AnimatesInt(Component component, string property) =>
            AnimatesInt(_config.ResolveRelativePath(component.transform), component.GetType(), property);

        public IntSettingCurve Animates<TComponent>(TComponent component, Expression<Func<TComponent, int>> property)
            where TComponent : Component =>
            AnimatesInt(component, ClipExpressionSupport.CreatePath(component, property));


        public BoolSettingCurve AnimatesBool(string path, Type type, string propertyName)
        {
            var binding = new EditorCurveBinding
            {
                path = path,
                type = type,
                propertyName = propertyName
            };
            return new BoolSettingCurve(_clip, binding);
        }

        public BoolSettingCurve AnimatesBool(Transform transform, Type type, string propertyName) =>
            AnimatesBool(_config.ResolveRelativePath(transform), type, propertyName);

        public BoolSettingCurve AnimatesBool(Component component, string property) =>
            AnimatesBool(_config.ResolveRelativePath(component.transform), component.GetType(), property);

        public BoolSettingCurve Animates<TComponent>(TComponent component, Expression<Func<TComponent, bool>> property)
            where TComponent : Component =>
            AnimatesBool(component, ClipExpressionSupport.CreatePath(component, property));


        public FloatSettingCurve AnimatesFloat(string path, Type type, string propertyName)
        {
            var binding = new EditorCurveBinding
            {
                path = path,
                type = type,
                propertyName = propertyName
            };
            return new FloatSettingCurve(_clip, binding);
        }

        public FloatSettingCurve AnimatesFloat(Transform transform, Type type, string propertyName) =>
            AnimatesFloat(_config.ResolveRelativePath(transform), type, propertyName);

        public FloatSettingCurve AnimatesFloat(Component component, string property) =>
            AnimatesFloat(_config.ResolveRelativePath(component.transform), component.GetType(), property);

        public FloatSettingCurve Animates<TComponent>(TComponent component, Expression<Func<TComponent, float>> property)
            where TComponent : Component =>
            AnimatesFloat(component, ClipExpressionSupport.CreatePath(component, property));


        public ColorSettingCurve AnimatesColor(string path, Type type, string propertyName)
        {
            var binding = new EditorCurveBinding
            {
                path = path,
                type = type,
                propertyName = propertyName
            };
            return new ColorSettingCurve(_clip, binding);
        }

        public ColorSettingCurve AnimatesColor(Transform transform, Type type, string propertyName) =>
            AnimatesColor(_config.ResolveRelativePath(transform), type, propertyName);

        public ColorSettingCurve AnimatesColor(Component component, string property) =>
            AnimatesColor(_config.ResolveRelativePath(component.transform), component.GetType(), property);

        public ColorSettingCurve Animates<TComponent>(TComponent component, Expression<Func<TComponent, Color>> property)
            where TComponent : Component =>
            AnimatesColor(component, ClipExpressionSupport.CreatePath(component, property));


        public Vector2SettingCurve AnimatesVector2(string path, Type type, string propertyName)
        {
            var binding = new EditorCurveBinding
            {
                path = path,
                type = type,
                propertyName = propertyName
            };
            return new Vector2SettingCurve(_clip, binding);
        }

        public Vector2SettingCurve AnimatesVector2(Transform transform, Type type, string propertyName) =>
            AnimatesVector2(_config.ResolveRelativePath(transform), type, propertyName);

        public Vector2SettingCurve AnimatesVector2(Component component, string property) =>
            AnimatesVector2(_config.ResolveRelativePath(component.transform), component.GetType(), property);

        public Vector2SettingCurve Animates<TComponent>(TComponent component, Expression<Func<TComponent, Vector2>> property)
            where TComponent : Component =>
            AnimatesVector2(component, ClipExpressionSupport.CreatePath(component, property));


        public Vector2IntSettingCurve AnimatesVector2Int(string path, Type type, string propertyName)
        {
            var binding = new EditorCurveBinding
            {
                path = path,
                type = type,
                propertyName = propertyName
            };
            return new Vector2IntSettingCurve(_clip, binding);
        }

        public Vector2IntSettingCurve AnimatesVector2Int(Transform transform, Type type, string propertyName) =>
            AnimatesVector2Int(_config.ResolveRelativePath(transform), type, propertyName);

        public Vector2IntSettingCurve AnimatesVector2Int(Component component, string property) =>
            AnimatesVector2Int(_config.ResolveRelativePath(component.transform), component.GetType(), property);

        public Vector2IntSettingCurve Animates<TComponent>(TComponent component, Expression<Func<TComponent, Vector2Int>> property)
            where TComponent : Component =>
            AnimatesVector2Int(component, ClipExpressionSupport.CreatePath(component, property));


        public Vector3SettingCurve AnimatesVector3(string path, Type type, string propertyName)
        {
            var binding = new EditorCurveBinding
            {
                path = path,
                type = type,
                propertyName = propertyName
            };
            return new Vector3SettingCurve(_clip, binding);
        }

        public Vector3SettingCurve AnimatesVector3(Transform transform, Type type, string propertyName) =>
            AnimatesVector3(_config.ResolveRelativePath(transform), type, propertyName);

        public Vector3SettingCurve AnimatesVector3(Component component, string property) =>
            AnimatesVector3(_config.ResolveRelativePath(component.transform), component.GetType(), property);

        public Vector3SettingCurve Animates<TComponent>(TComponent component, Expression<Func<TComponent, Vector3>> property)
            where TComponent : Component =>
            AnimatesVector3(component, ClipExpressionSupport.CreatePath(component, property));


        public Vector3IntSettingCurve AnimatesVector3Int(string path, Type type, string propertyName)
        {
            var binding = new EditorCurveBinding
            {
                path = path,
                type = type,
                propertyName = propertyName
            };
            return new Vector3IntSettingCurve(_clip, binding);
        }

        public Vector3IntSettingCurve AnimatesVector3Int(Transform transform, Type type, string propertyName) =>
            AnimatesVector3Int(_config.ResolveRelativePath(transform), type, propertyName);

        public Vector3IntSettingCurve AnimatesVector3Int(Component component, string property) =>
            AnimatesVector3Int(_config.ResolveRelativePath(component.transform), component.GetType(), property);

        public Vector3IntSettingCurve Animates<TComponent>(TComponent component, Expression<Func<TComponent, Vector3Int>> property)
            where TComponent : Component =>
            AnimatesVector3Int(component, ClipExpressionSupport.CreatePath(component, property));


        public Vector4SettingCurve AnimatesVector4(string path, Type type, string propertyName)
        {
            var binding = new EditorCurveBinding
            {
                path = path,
                type = type,
                propertyName = propertyName
            };
            return new Vector4SettingCurve(_clip, binding);
        }

        public Vector4SettingCurve AnimatesVector4(Transform transform, Type type, string propertyName) =>
            AnimatesVector4(_config.ResolveRelativePath(transform), type, propertyName);

        public Vector4SettingCurve AnimatesVector4(Component component, string property) =>
            AnimatesVector4(_config.ResolveRelativePath(component.transform), component.GetType(), property);

        public Vector4SettingCurve Animates<TComponent>(TComponent component, Expression<Func<TComponent, Vector4>> property)
            where TComponent : Component =>
            AnimatesVector4(component, ClipExpressionSupport.CreatePath(component, property));


        public QuaternionSettingCurve AnimatesQuaternion(string path, Type type, string propertyName)
        {
            var binding = new EditorCurveBinding
            {
                path = path,
                type = type,
                propertyName = propertyName
            };
            return new QuaternionSettingCurve(_clip, binding);
        }

        public QuaternionSettingCurve AnimatesQuaternion(Transform transform, Type type, string propertyName) =>
            AnimatesQuaternion(_config.ResolveRelativePath(transform), type, propertyName);

        public QuaternionSettingCurve AnimatesQuaternion(Component component, string property) =>
            AnimatesQuaternion(_config.ResolveRelativePath(component.transform), component.GetType(), property);

        public QuaternionSettingCurve Animates<TComponent>(TComponent component, Expression<Func<TComponent, Quaternion>> property)
            where TComponent : Component =>
            AnimatesQuaternion(component, ClipExpressionSupport.CreatePath(component, property));


        public RectSettingCurve AnimatesRect(string path, Type type, string propertyName)
        {
            var binding = new EditorCurveBinding
            {
                path = path,
                type = type,
                propertyName = propertyName
            };
            return new RectSettingCurve(_clip, binding);
        }

        public RectSettingCurve AnimatesRect(Transform transform, Type type, string propertyName) =>
            AnimatesRect(_config.ResolveRelativePath(transform), type, propertyName);

        public RectSettingCurve AnimatesRect(Component component, string property) =>
            AnimatesRect(_config.ResolveRelativePath(component.transform), component.GetType(), property);

        public RectSettingCurve Animates<TComponent>(TComponent component, Expression<Func<TComponent, Rect>> property)
            where TComponent : Component =>
            AnimatesRect(component, ClipExpressionSupport.CreatePath(component, property));


        public RectIntSettingCurve AnimatesRectInt(string path, Type type, string propertyName)
        {
            var binding = new EditorCurveBinding
            {
                path = path,
                type = type,
                propertyName = propertyName
            };
            return new RectIntSettingCurve(_clip, binding);
        }

        public RectIntSettingCurve AnimatesRectInt(Transform transform, Type type, string propertyName) =>
            AnimatesRectInt(_config.ResolveRelativePath(transform), type, propertyName);

        public RectIntSettingCurve AnimatesRectInt(Component component, string property) =>
            AnimatesRectInt(_config.ResolveRelativePath(component.transform), component.GetType(), property);

        public RectIntSettingCurve Animates<TComponent>(TComponent component, Expression<Func<TComponent, RectInt>> property)
            where TComponent : Component =>
            AnimatesRectInt(component, ClipExpressionSupport.CreatePath(component, property));


        public BoundsSettingCurve AnimatesBounds(string path, Type type, string propertyName)
        {
            var binding = new EditorCurveBinding
            {
                path = path,
                type = type,
                propertyName = propertyName
            };
            return new BoundsSettingCurve(_clip, binding);
        }

        public BoundsSettingCurve AnimatesBounds(Transform transform, Type type, string propertyName) =>
            AnimatesBounds(_config.ResolveRelativePath(transform), type, propertyName);

        public BoundsSettingCurve AnimatesBounds(Component component, string property) =>
            AnimatesBounds(_config.ResolveRelativePath(component.transform), component.GetType(), property);

        public BoundsSettingCurve Animates<TComponent>(TComponent component, Expression<Func<TComponent, Bounds>> property)
            where TComponent : Component =>
            AnimatesBounds(component, ClipExpressionSupport.CreatePath(component, property));


        public BoundsIntSettingCurve AnimatesBoundsInt(string path, Type type, string propertyName)
        {
            var binding = new EditorCurveBinding
            {
                path = path,
                type = type,
                propertyName = propertyName
            };
            return new BoundsIntSettingCurve(_clip, binding);
        }

        public BoundsIntSettingCurve AnimatesBoundsInt(Transform transform, Type type, string propertyName) =>
            AnimatesBoundsInt(_config.ResolveRelativePath(transform), type, propertyName);

        public BoundsIntSettingCurve AnimatesBoundsInt(Component component, string property) =>
            AnimatesBoundsInt(_config.ResolveRelativePath(component.transform), component.GetType(), property);

        public BoundsIntSettingCurve Animates<TComponent>(TComponent component, Expression<Func<TComponent, BoundsInt>> property)
            where TComponent : Component =>
            AnimatesBoundsInt(component, ClipExpressionSupport.CreatePath(component, property));

    }

    #endregion AccEditClip Animates function
}
